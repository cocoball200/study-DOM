# 변수

- 변수를 구분하는 이유는 기능과 목적이 다르기 때문이다.
- 글로벌 변수의 기능과 목적
    - 다른 js 파일에서 변숫값을 공유
    - 파일에서 공통 변수 개념으로 사용
    - 의도는 좋으나 처리 속도가 떨어짐
- 로컬 변수의 기능 목적
    - 빠르게 식별자를 해결하기 위해 가까운 스코프의 변수를 사용하려는 것
    - 미국에서 찾는 것 보다, 한국에서 찾는게 더 빠르니까
    
- 글로벌 변수는 글로벌 오브젝트의 로컬 변수
- var 키워드를 사용하지 않고 value를 글로벌 변수로 선언하고 100 할당. point() 함수 안에서 ㅍalue 변수에 300 할당/ value 변수가 로컬 변수가 아니므로 글로벌 오브젝트의 value 변수에 300 할당. 함수 안에서 글로벌 변수에 값을 설정하는 것은 좋지 않다. 함수안의 변수는 함수안에서 사용되는 게 좋음.

```python
value = 100;
function point(){
   value = 300;
    log("value",value)

}
```

- 블록 스코프 유형
    - function something(){}  블록 스코프
    - fucction  안과 밖에 같은 이름의 let 변수 선언 가능
    - 스코프가 다르기 때문
    - function 밖의 변수를 function 안에서 사용할 수 있는 것은 실행시 환경을 읽고 가까운 변수를 찾아서 사용하기 때문 ⇒ 클로저
    
- try-catch  블록 스코프
- try 블록 {} 기준으로 안과 밖에 같은 이름의 let 변수 선언 가능
- catch에서 try밖의 변수 사용
    - log("catch", sports) 에서 밖을 출력한다. 이유는 try 블록 밖의 변수를 catch에서 사용하기 때문
    
    ```python
    let sports = "밖"
    try{
    	let sports = "안"
    	 novar = error
    }catch(e){
    	log("catch", sports)
    }
    ```
    

 

switch-case

- switch 문도 블록 스코프
- switch 블록 기준으로 같은 이름의 let 변수 작성 불가
- case, default는 블록 스코프가 아니기 때문 - 컴파일 에러남
