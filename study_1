사용자와 만나서 콘텐츠를 제공하고, 사용자를 생각해야 한다. 

비기너에게 중요한 것은

- 기본을 만드는 것
- 코딩 경험을 많이 하는 것
- 감각을 만드는 것

연산자

- 규칙에 따라 계산하여 값을 구함
- typeof, delete, void
- instanceof, in , new

표현식

- 1+2
- var total = 1+2
- var value = total/ 1+2

자바스크립트는 표현식의 연결이다 . 

할당 연산자 

- 단일 할당 연산자
- 복합 할당 연산자
- 먼저 = 앞을 연산한 후, 할당

해석

js코드를 기계어로 바꾸는 것, compile

엔진이 해석하고 실행한다. 

Dom

- 사용자와 상호작용하는 것
- 동적으로 사용자가 참여한다는 것
- 돔은 다양한 기술과 연동되며, 자바스크립트로 통합, 융합
- cssom : css object model
- style을 반영하여 트리를 만들고, 사이즈와 레이아웃을 만들고, 컬러를 하고, 이미지를 가져와야 한다.
- wai-aria

시맨틱 : 의미를 갖는 것 

코드를 풀어서 읽을 수 있는 것은 코드마다 시맨틱을 갖고 때문입니다. 

앞뒤가 연결된 시나리오가 되도록 시맨틱을 부여한다. 

getElementById 는 엘리먼트를 구해 무엇인가 하려는 것, 엘리먼트는 오브젝트 형태이다. 

함수는 목적이 분리되어야 한다.  

자바스크립트는  host 환경에서의 oop 이다. 

Host Environment : 모든 자바스크립트는 built in object이다. 사전처리를 하지 않아도  돔의 오브젝트를 사용할 수 있도록 Host Environment가 다 맞춰놓았다. 그래서 자바스크립트를 사용하게 되는 것. 

OOP의 Object에 다양한 개념, 형태 등이 포함되어 있으므로, Object를 객체로 표기하는 것은 앞뒤 문맥에 따라 달라질 수 있음. 자바스크립트는 Host 환경에서의 OOP이므로 일반적인 OOP의 Object와 차이가 있다. 

자바스크립트의 Object, property 

- 함수 실행 단계
    - 호출 전: 함수 실행을 위한 기반 환경 설정
    - 함수 호출 : 함수를 호출하여 함수 실행
    
- 함수 실행을 위한 기반 환경 설정
    - function 오브젝트로 생성 (object가 되어야 함수를 실행할 수 있다)
    - 스코프 설정 (함수가 속한 , 자바스크립트는 정적 스코프 입니다.)
    - 이 단계의 키워드는 오브젝트, 프로퍼티
        - foo.hi
    
     
    
- 함수를 호출하여 함수 실행
    - 함수가 실행되는 환경을 만들고
    - 함수 블록의 코드를 실행합니다.
    - 이 단계의 키워드는 실행 콘텍스트
